import { __decorate, __metadata, __param } from "tslib";
import { Injectable, NgZone, Optional, Inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MONACO_PATH } from '../interfaces';
import * as i0 from "@angular/core";
var MonacoEditorLoaderService = /** @class */ (function () {
    function MonacoEditorLoaderService(ngZone, monacoPathConfig) {
        var _this = this;
        this.ngZone = ngZone;
        this.monacoPathConfig = monacoPathConfig;
        this.isMonacoLoaded$ = new BehaviorSubject(false);
        this._monacoPath = 'assets/monaco-editor/min/vs';
        if (window.monacoEditorAlreadyInitialized) {
            ngZone.run(function () { return _this.isMonacoLoaded$.next(true); });
            return;
        }
        window.monacoEditorAlreadyInitialized = true;
        if (this.monacoPathConfig) {
            this.monacoPath = this.monacoPathConfig;
        }
        this.loadMonaco();
    }
    Object.defineProperty(MonacoEditorLoaderService.prototype, "monacoPath", {
        set: function (value) {
            if (value) {
                this._monacoPath = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    MonacoEditorLoaderService.prototype.loadMonaco = function () {
        var _this = this;
        var onGotAmdLoader = function () {
            var vsPath = _this._monacoPath;
            window.amdRequire = window.require;
            var isElectron = !!_this.nodeRequire;
            var isPathUrl = vsPath.includes('http');
            if (isElectron) {
                // Restore node require in window
                window.require = _this.nodeRequire;
                if (!isPathUrl) {
                    var path = window.require('path');
                    vsPath = path.resolve(window.__dirname, _this._monacoPath);
                }
            }
            window.amdRequire.config({ paths: { vs: vsPath } });
            // Load monaco
            window.amdRequire(['vs/editor/editor.main'], function () {
                _this.ngZone.run(function () { return _this.isMonacoLoaded$.next(true); });
            }, function (error) { return console.error('Error loading monaco-editor: ', error); });
        };
        // Check if AMD loader already available
        var isAmdLoaderAvailable = !!window.amdRequire;
        if (isAmdLoaderAvailable) {
            return onGotAmdLoader();
        }
        var isElectron = !!window.require;
        if (isElectron) {
            this.addElectronFixScripts();
            this.nodeRequire = window.require;
        }
        var loaderScript = document.createElement('script');
        loaderScript.type = 'text/javascript';
        loaderScript.src = this._monacoPath + "/loader.js";
        loaderScript.addEventListener('load', onGotAmdLoader);
        document.body.appendChild(loaderScript);
    };
    MonacoEditorLoaderService.prototype.addElectronFixScripts = function () {
        var electronFixScript = document.createElement('script');
        // workaround monaco-css not understanding the environment
        var inlineScript = document.createTextNode('self.module = undefined;');
        // workaround monaco-typescript not understanding the environment
        var inlineScript2 = document.createTextNode('self.process.browser = true;');
        electronFixScript.appendChild(inlineScript);
        electronFixScript.appendChild(inlineScript2);
        document.body.appendChild(electronFixScript);
    };
    MonacoEditorLoaderService.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MONACO_PATH,] }] }
    ]; };
    MonacoEditorLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MonacoEditorLoaderService_Factory() { return new MonacoEditorLoaderService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject("MONACO_PATH", 8)); }, token: MonacoEditorLoaderService, providedIn: "root" });
    MonacoEditorLoaderService = __decorate([
        Injectable({ providedIn: 'root' }),
        __param(1, Optional()), __param(1, Inject(MONACO_PATH)),
        __metadata("design:paramtypes", [NgZone, String])
    ], MonacoEditorLoaderService);
    return MonacoEditorLoaderService;
}());
export { MonacoEditorLoaderService };
//# sourceMappingURL=data:application/json;base64,