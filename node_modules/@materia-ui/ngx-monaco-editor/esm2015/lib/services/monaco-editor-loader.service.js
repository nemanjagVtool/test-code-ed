import { __decorate, __metadata, __param } from "tslib";
import { Injectable, NgZone, Optional, Inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MONACO_PATH } from '../interfaces';
import * as i0 from "@angular/core";
let MonacoEditorLoaderService = class MonacoEditorLoaderService {
    constructor(ngZone, monacoPathConfig) {
        this.ngZone = ngZone;
        this.monacoPathConfig = monacoPathConfig;
        this.isMonacoLoaded$ = new BehaviorSubject(false);
        this._monacoPath = 'assets/monaco-editor/min/vs';
        if (window.monacoEditorAlreadyInitialized) {
            ngZone.run(() => this.isMonacoLoaded$.next(true));
            return;
        }
        window.monacoEditorAlreadyInitialized = true;
        if (this.monacoPathConfig) {
            this.monacoPath = this.monacoPathConfig;
        }
        this.loadMonaco();
    }
    set monacoPath(value) {
        if (value) {
            this._monacoPath = value;
        }
    }
    loadMonaco() {
        const onGotAmdLoader = () => {
            let vsPath = this._monacoPath;
            window.amdRequire = window.require;
            const isElectron = !!this.nodeRequire;
            const isPathUrl = vsPath.includes('http');
            if (isElectron) {
                // Restore node require in window
                window.require = this.nodeRequire;
                if (!isPathUrl) {
                    const path = window.require('path');
                    vsPath = path.resolve(window.__dirname, this._monacoPath);
                }
            }
            window.amdRequire.config({ paths: { vs: vsPath } });
            // Load monaco
            window.amdRequire(['vs/editor/editor.main'], () => {
                this.ngZone.run(() => this.isMonacoLoaded$.next(true));
            }, (error) => console.error('Error loading monaco-editor: ', error));
        };
        // Check if AMD loader already available
        const isAmdLoaderAvailable = !!window.amdRequire;
        if (isAmdLoaderAvailable) {
            return onGotAmdLoader();
        }
        const isElectron = !!window.require;
        if (isElectron) {
            this.addElectronFixScripts();
            this.nodeRequire = window.require;
        }
        const loaderScript = document.createElement('script');
        loaderScript.type = 'text/javascript';
        loaderScript.src = `${this._monacoPath}/loader.js`;
        loaderScript.addEventListener('load', onGotAmdLoader);
        document.body.appendChild(loaderScript);
    }
    addElectronFixScripts() {
        const electronFixScript = document.createElement('script');
        // workaround monaco-css not understanding the environment
        const inlineScript = document.createTextNode('self.module = undefined;');
        // workaround monaco-typescript not understanding the environment
        const inlineScript2 = document.createTextNode('self.process.browser = true;');
        electronFixScript.appendChild(inlineScript);
        electronFixScript.appendChild(inlineScript2);
        document.body.appendChild(electronFixScript);
    }
};
MonacoEditorLoaderService.ctorParameters = () => [
    { type: NgZone },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MONACO_PATH,] }] }
];
MonacoEditorLoaderService.ɵprov = i0.ɵɵdefineInjectable({ factory: function MonacoEditorLoaderService_Factory() { return new MonacoEditorLoaderService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject("MONACO_PATH", 8)); }, token: MonacoEditorLoaderService, providedIn: "root" });
MonacoEditorLoaderService = __decorate([
    Injectable({ providedIn: 'root' }),
    __param(1, Optional()), __param(1, Inject(MONACO_PATH)),
    __metadata("design:paramtypes", [NgZone, String])
], MonacoEditorLoaderService);
export { MonacoEditorLoaderService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLWVkaXRvci1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BtYXRlcmlhLXVpL25neC1tb25hY28tZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21vbmFjby1lZGl0b3ItbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUc1QyxJQUFhLHlCQUF5QixHQUF0QyxNQUFhLHlCQUF5QjtJQVdsQyxZQUFvQixNQUFjLEVBQTBDLGdCQUF3QjtRQUFoRixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQTBDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBUTtRQVRwRyxvQkFBZSxHQUE2QixJQUFJLGVBQWUsQ0FBVSxLQUFLLENBQUMsQ0FBQztRQUN4RSxnQkFBVyxHQUFHLDZCQUE2QixDQUFDO1FBU2xELElBQVUsTUFBTyxDQUFDLDhCQUE4QixFQUFFO1lBQ2hELE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNsRCxPQUFPO1NBQ1I7UUFFSyxNQUFPLENBQUMsOEJBQThCLEdBQUcsSUFBSSxDQUFDO1FBRXBELElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1NBQ3pDO1FBRUQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFuQkQsSUFBSSxVQUFVLENBQUMsS0FBYTtRQUN4QixJQUFJLEtBQUssRUFBRTtZQUNQLElB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akQsQ0FBQztDQUNKLENBQUE7O1lBeEUrQixNQUFNO3lDQUFHLFFBQVEsWUFBSSxNQUFNLFNBQUMsV0FBVzs7O0FBWDFELHlCQUF5QjtJQURyQyxVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLENBQUM7SUFZTSxXQUFBLFFBQVEsRUFBRSxDQUFBLEVBQUUsV0FBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7cUNBQXhDLE1BQU07R0FYekIseUJBQXlCLENBbUZyQztTQW5GWSx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTU9OQUNPX1BBVEggfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBNb25hY29FZGl0b3JMb2FkZXJTZXJ2aWNlIHtcbiAgICBub2RlUmVxdWlyZTogYW55O1xuICAgIGlzTW9uYWNvTG9hZGVkJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG4gICAgcHJpdmF0ZSBfbW9uYWNvUGF0aCA9ICdhc3NldHMvbW9uYWNvLWVkaXRvci9taW4vdnMnO1xuXG4gICAgc2V0IG1vbmFjb1BhdGgodmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbmFjb1BhdGggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIEBPcHRpb25hbCgpIEBJbmplY3QoTU9OQUNPX1BBVEgpIHB1YmxpYyBtb25hY29QYXRoQ29uZmlnOiBzdHJpbmcpIHtcbiAgICAgIGlmICgoPGFueT53aW5kb3cpLm1vbmFjb0VkaXRvckFscmVhZHlJbml0aWFsaXplZCkge1xuICAgICAgICBuZ1pvbmUucnVuKCgpID0+IHRoaXMuaXNNb25hY29Mb2FkZWQkLm5leHQodHJ1ZSkpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgICg8YW55PndpbmRvdykubW9uYWNvRWRpdG9yQWxyZWFkeUluaXRpYWxpemVkID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMubW9uYWNvUGF0aENvbmZpZykge1xuICAgICAgICB0aGlzLm1vbmFjb1BhdGggPSB0aGlzLm1vbmFjb1BhdGhDb25maWc7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9hZE1vbmFjbygpO1xuICAgIH1cblxuICAgIGxvYWRNb25hY28oKSB7XG4gICAgICBjb25zdCBvbkdvdEFtZExvYWRlciA9ICgpID0+IHtcblxuICAgICAgICBsZXQgdnNQYXRoID0gdGhpcy5fbW9uYWNvUGF0aDtcbiAgICAgICAgKDxhbnk+d2luZG93KS5hbWRSZXF1aXJlID0gKDxhbnk+d2luZG93KS5yZXF1aXJlO1xuXG4gICAgICAgIGNvbnN0IGlzRWxlY3Ryb24gPSAhIXRoaXMubm9kZVJlcXVpcmU7XG4gICAgICAgIGNvbnN0IGlzUGF0aFVybCA9IHZzUGF0aC5pbmNsdWRlcygnaHR0cCcpO1xuXG4gICAgICAgIGlmIChpc0VsZWN0cm9uKSB7XG4gICAgICAgICAgLy8gUmVzdG9yZSBub2RlIHJlcXVpcmUgaW4gd2luZG93XG4gICAgICAgICAgKDxhbnk+d2luZG93KS5yZXF1aXJlID0gdGhpcy5ub2RlUmVxdWlyZTtcblxuICAgICAgICAgIGlmICghaXNQYXRoVXJsKSB7XG4gICAgICAgICAgICBjb25zdCBwYXRoID0gKDxhbnk+d2luZG93KS5yZXF1aXJlKCdwYXRoJyk7XG4gICAgICAgICAgICB2c1BhdGggPSBwYXRoLnJlc29sdmUoKDxhbnk+d2luZG93KS5fX2Rpcm5hbWUsIHRoaXMuX21vbmFjb1BhdGgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICg8YW55PndpbmRvdykuYW1kUmVxdWlyZS5jb25maWcoeyBwYXRoczogeyB2czogdnNQYXRoIH0gfSk7XG5cbiAgICAgICAgLy8gTG9hZCBtb25hY29cbiAgICAgICAgKDxhbnk+d2luZG93KS5hbWRSZXF1aXJlKFsndnMvZWRpdG9yL2VkaXRvci5tYWluJ10sICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmlzTW9uYWNvTG9hZGVkJC5uZXh0KHRydWUpKTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiBjb25zb2xlLmVycm9yKCdFcnJvciBsb2FkaW5nIG1vbmFjby1lZGl0b3I6ICcsIGVycm9yKSk7XG4gICAgICB9O1xuXG4gICAgICAvLyBDaGVjayBpZiBBTUQgbG9hZGVyIGFscmVhZHkgYXZhaWxhYmxlXG4gICAgICBjb25zdCBpc0FtZExvYWRlckF2YWlsYWJsZSA9ICEhKDxhbnk+d2luZG93KS5hbWRSZXF1aXJlO1xuICAgICAgaWYgKGlzQW1kTG9hZGVyQXZhaWxhYmxlKSB7XG4gICAgICAgIHJldHVybiBvbkdvdEFtZExvYWRlcigpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0VsZWN0cm9uID0gISEoPGFueT53aW5kb3cpLnJlcXVpcmU7XG5cbiAgICAgIGlmIChpc0VsZWN0cm9uKSB7XG4gICAgICAgIHRoaXMuYWRkRWxlY3Ryb25GaXhTY3JpcHRzKCk7XG4gICAgICAgIHRoaXMubm9kZVJlcXVpcmUgPSAoPGFueT53aW5kb3cpLnJlcXVpcmU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGxvYWRlclNjcmlwdDogSFRNTFNjcmlwdEVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIGxvYWRlclNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG4gICAgICBsb2FkZXJTY3JpcHQuc3JjID0gYCR7dGhpcy5fbW9uYWNvUGF0aH0vbG9hZGVyLmpzYDtcbiAgICAgIGxvYWRlclNjcmlwdC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgb25Hb3RBbWRMb2FkZXIpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsb2FkZXJTY3JpcHQpO1xuICAgIH1cblxuICAgIGFkZEVsZWN0cm9uRml4U2NyaXB0cygpIHtcbiAgICAgICAgY29uc3QgZWxlY3Ryb25GaXhTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgICAgLy8gd29ya2Fyb3VuZCBtb25hY28tY3NzIG5vdCB1bmRlcnN0YW5kaW5nIHRoZSBlbnZpcm9ubWVudFxuICAgICAgICBjb25zdCBpbmxpbmVTY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnc2VsZi5tb2R1bGUgPSB1bmRlZmluZWQ7Jyk7XG4gICAgICAgIC8vIHdvcmthcm91bmQgbW9uYWNvLXR5cGVzY3JpcHQgbm90IHVuZGVyc3RhbmRpbmcgdGhlIGVudmlyb25tZW50XG4gICAgICAgIGNvbnN0IGlubGluZVNjcmlwdDIgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnc2VsZi5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlOycpO1xuICAgICAgICBlbGVjdHJvbkZpeFNjcmlwdC5hcHBlbmRDaGlsZChpbmxpbmVTY3JpcHQpO1xuICAgICAgICBlbGVjdHJvbkZpeFNjcmlwdC5hcHBlbmRDaGlsZChpbmxpbmVTY3JpcHQyKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVjdHJvbkZpeFNjcmlwdCk7XG4gICAgfVxufVxuIl19